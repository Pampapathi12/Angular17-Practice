# **Enums in TypeScript ‚Äì Detailed Explanation**  

Enums (**Enumerations**) in TypeScript allow you to define a collection of **named constants** that can be used to represent a set of related values. They make the code more **readable, maintainable, and type-safe**.  

---

## **1. Declaring an Enum**
An `enum` is defined using the `enum` keyword.

### **Example: Basic Enum**
```typescript
enum Direction {
    Up,
    Down,
    Left,
    Right
}

console.log(Direction.Up);    // 0
console.log(Direction.Down);  // 1
console.log(Direction.Left);  // 2
console.log(Direction.Right); // 3
```
- By default, TypeScript assigns **numeric values starting from `0`**.
- `Up = 0`, `Down = 1`, `Left = 2`, `Right = 3`.

---

## **2. Assigning Custom Values**
You can assign custom values to enum members.

### **a) Custom Numeric Values**
```typescript
enum Status {
    Pending = 1,
    InProgress = 5,
    Completed = 10
}

console.log(Status.Pending);    // 1
console.log(Status.InProgress); // 5
console.log(Status.Completed);  // 10
```
- You can start at any number, and the next values will **not** be auto-incremented unless explicitly defined.

### **b) String Enums**
Enums can also store **string values**.

```typescript
enum Role {
    Admin = "ADMIN",
    User = "USER",
    Guest = "GUEST"
}

console.log(Role.Admin);  // "ADMIN"
console.log(Role.User);   // "USER"
console.log(Role.Guest);  // "GUEST"
```
- String enums are **not auto-incremented**.
- They provide **better readability** in debugging.

---

## **3. Heterogeneous Enums (Mixed Values)**
You can mix **numbers and strings** in an enum.

```typescript
enum MixedEnum {
    Success = 1,
    Failure = "ERROR",
    Processing = 2
}

console.log(MixedEnum.Success);    // 1
console.log(MixedEnum.Failure);    // "ERROR"
console.log(MixedEnum.Processing); // 2
```
- **Not recommended** as it reduces consistency.

---

## **4. Reverse Mapping (Only for Numeric Enums)**
TypeScript provides **reverse mapping** for numeric enums.

```typescript
enum Color {
    Red = 1,
    Green = 2,
    Blue = 3
}

console.log(Color.Red);   // 1
console.log(Color[1]);    // "Red"
console.log(Color.Green); // 2
console.log(Color[2]);    // "Green"
```
- You can **access enum names using their values**.
- This **does not work** for string enums.

---

## **5. Enum with Computed Values**
You can use **computed values** in enums.

```typescript
const baseValue = 10;

enum Computed {
    A = baseValue,
    B = A * 2,
    C = B + 5
}

console.log(Computed.A); // 10
console.log(Computed.B); // 20
console.log(Computed.C); // 25
```
- Computed values can use constants and expressions.

---

## **6. Using Enums in Functions**
Enums are useful in function parameters.

```typescript
enum HttpStatus {
    OK = 200,
    NotFound = 404,
    InternalServerError = 500
}

function handleResponse(status: HttpStatus) {
    if (status === HttpStatus.OK) {
        console.log("Request successful");
    } else {
        console.log("Error occurred");
    }
}

handleResponse(HttpStatus.OK);       // "Request successful"
handleResponse(HttpStatus.NotFound); // "Error occurred"
```
- Enums help make function calls **more readable**.

---

## **7. `const enum` ‚Äì Performance Optimization**
A `const enum` removes runtime overhead by **inlining values**.

```typescript
const enum Size {
    Small = 1,
    Medium = 2,
    Large = 3
}

console.log(Size.Small); // 1
console.log(Size.Medium); // 2
console.log(Size.Large); // 3
```
- Unlike regular enums, **`const enum` does not generate JavaScript code**.
- It **replaces** `Size.Small` with `1` at compile time.
- **Best for performance** when you don‚Äôt need reverse mapping.

---

## **8. Enum vs Object**
Enums can be **replaced** with objects in some cases.

```typescript
const Sizes = {
    Small: 1,
    Medium: 2,
    Large: 3
} as const;

console.log(Sizes.Small); // 1
```
- Objects are **more lightweight** but lack **auto-increment** and **reverse mapping**.

---

## **9. Enums in Switch Statements**
Enums are commonly used in `switch` cases.

```typescript
enum Action {
    Start,
    Stop,
    Pause
}

function performAction(action: Action) {
    switch (action) {
        case Action.Start:
            console.log("Starting...");
            break;
        case Action.Stop:
            console.log("Stopping...");
            break;
        case Action.Pause:
            console.log("Pausing...");
            break;
        default:
            console.log("Unknown action");
    }
}

performAction(Action.Start); // "Starting..."
```
- Using enums in `switch` makes the code **more readable**.

---

## **10. Enum with Type Safety**
You can use `enum` with **type safety**.

```typescript
enum Days {
    Monday = "MON",
    Tuesday = "TUE",
    Wednesday = "WED"
}

let today: Days = Days.Monday;
// today = "MON"; // ‚ùå Error: Type '"MON"' is not assignable to type 'Days'
```
- Ensures **only valid values** are assigned.

---

## **11. Enums with TypeScript Interfaces**
Enums can be used inside **interfaces**.

```typescript
enum UserRole {
    Admin = "ADMIN",
    User = "USER"
}

interface User {
    name: string;
    role: UserRole;
}

const user1: User = { name: "Alice", role: UserRole.Admin };

console.log(user1); // { name: "Alice", role: "ADMIN" }
```
- Useful when enforcing **specific roles** in a system.

---

## **12. Enum Best Practices**
‚úÖ **Use `const enum` for better performance** (when no reverse mapping is needed).  
‚úÖ **Use string enums** for better debugging.  
‚úÖ **Avoid mixing numeric and string values** in the same enum.  
‚úÖ **Use enums in function arguments and switch cases** for **type safety**.  

---

## **13. Enum vs Union Types**
Enums can sometimes be replaced with **union types**.

```typescript
type Status = "Pending" | "InProgress" | "Completed";

let taskStatus: Status = "Pending"; // ‚úÖ Allowed
// taskStatus = "Done"; // ‚ùå Error: Type '"Done"' is not assignable to type 'Status'
```
- **Union types are better** if you don‚Äôt need auto-increment or reverse mapping.

---

## **14. Summary**
| Feature              | Numeric Enum | String Enum | `const enum` |
|----------------------|-------------|-------------|--------------|
| Auto-increment      | ‚úÖ Yes       | ‚ùå No       | ‚úÖ Yes       |
| Reverse mapping     | ‚úÖ Yes       | ‚ùå No       | ‚ùå No       |
| Debugging friendly  | ‚ùå No        | ‚úÖ Yes      | ‚úÖ Yes      |
| Performance (JS Output) | üü° Moderate | üü¢ Good | üü¢ Best |

Enums make the code **more readable**, **type-safe**, and **maintainable**.  
Would you like more examples or explanations? üöÄ

### **Real-Time Use Cases of Enums in TypeScript**  

Enums are widely used in real-world applications for better **code organization, readability, and maintainability**. Below are some **real-time examples** of where enums are helpful.

---

## **1. User Roles in an Authentication System**
Enums help define **user roles** in an authentication system.

```typescript
enum UserRole {
    Admin = "ADMIN",
    Editor = "EDITOR",
    Viewer = "VIEWER"
}

function getUserPermissions(role: UserRole) {
    switch (role) {
        case UserRole.Admin:
            return "Full access";
        case UserRole.Editor:
            return "Can edit content";
        case UserRole.Viewer:
            return "Can only view content";
        default:
            return "Invalid role";
    }
}

console.log(getUserPermissions(UserRole.Admin));  // "Full access"
console.log(getUserPermissions(UserRole.Viewer)); // "Can only view content"
```
‚úÖ **Why use Enums?**  
- Prevents invalid roles.
- Improves code readability.
- Enforces type safety.

---

## **2. HTTP Status Codes in an API**
Enums can be used to define **HTTP status codes** for better API response handling.

```typescript
enum HttpStatus {
    OK = 200,
    BadRequest = 400,
    Unauthorized = 401,
    NotFound = 404,
    InternalServerError = 500
}

function handleResponse(status: HttpStatus) {
    if (status === HttpStatus.OK) {
        console.log("Request successful");
    } else {
        console.log(`Error occurred: ${status}`);
    }
}

handleResponse(HttpStatus.OK);        // "Request successful"
handleResponse(HttpStatus.NotFound);  // "Error occurred: 404"
```
‚úÖ **Why use Enums?**  
- Improves **readability** by replacing hardcoded numbers.
- Ensures **type safety**.
- Prevents mistakes like `"404"` instead of `404`.

---

## **3. Order Status in an E-commerce App**
Enums help track the status of orders in an **e-commerce application**.

```typescript
enum OrderStatus {
    Pending = "PENDING",
    Shipped = "SHIPPED",
    Delivered = "DELIVERED",
    Cancelled = "CANCELLED"
}

function getOrderMessage(status: OrderStatus) {
    switch (status) {
        case OrderStatus.Pending:
            return "Your order is pending.";
        case OrderStatus.Shipped:
            return "Your order has been shipped.";
        case OrderStatus.Delivered:
            return "Your order has been delivered.";
        case OrderStatus.Cancelled:
            return "Your order was cancelled.";
        default:
            return "Invalid status";
    }
}

console.log(getOrderMessage(OrderStatus.Shipped)); // "Your order has been shipped."
```
‚úÖ **Why use Enums?**  
- Avoids typos like `"shiped"` instead of `"shipped"`.  
- Easy to **add new statuses** in the future.  

---

## **4. Logging Levels in an Application**
Enums are useful for defining **logging levels** in applications.

```typescript
enum LogLevel {
    Debug = "DEBUG",
    Info = "INFO",
    Warn = "WARN",
    Error = "ERROR"
}

function logMessage(level: LogLevel, message: string) {
    console.log(`[${level}] ${message}`);
}

logMessage(LogLevel.Info, "Application started.");  // "[INFO] Application started."
logMessage(LogLevel.Error, "Something went wrong!"); // "[ERROR] Something went wrong!"
```
‚úÖ **Why use Enums?**  
- Avoids using `"INFO"`, `"ERROR"`, etc., as plain strings.  
- **Ensures consistency** across the application.  

---

## **5. Days of the Week in a Calendar Application**
Enums can be used to represent **days of the week**.

```typescript
enum WeekDay {
    Sunday = "SUNDAY",
    Monday = "MONDAY",
    Tuesday = "TUESDAY",
    Wednesday = "WEDNESDAY",
    Thursday = "THURSDAY",
    Friday = "FRIDAY",
    Saturday = "SATURDAY"
}

function isWeekend(day: WeekDay): boolean {
    return day === WeekDay.Saturday || day === WeekDay.Sunday;
}

console.log(isWeekend(WeekDay.Saturday)); // true
console.log(isWeekend(WeekDay.Wednesday)); // false
```
‚úÖ **Why use Enums?**  
- Prevents spelling errors like `"monday"` instead of `"Monday"`.  
- Improves **code clarity**.  

---

## **6. Payment Methods in an E-commerce Application**
Enums can define **payment methods**.

```typescript
enum PaymentMethod {
    CreditCard = "CREDIT_CARD",
    DebitCard = "DEBIT_CARD",
    PayPal = "PAYPAL",
    CashOnDelivery = "CASH_ON_DELIVERY"
}

function processPayment(method: PaymentMethod) {
    switch (method) {
        case PaymentMethod.CreditCard:
            console.log("Processing credit card payment...");
            break;
        case PaymentMethod.DebitCard:
            console.log("Processing debit card payment...");
            break;
        case PaymentMethod.PayPal:
            console.log("Processing PayPal payment...");
            break;
        case PaymentMethod.CashOnDelivery:
            console.log("Payment will be made on delivery.");
            break;
        default:
            console.log("Invalid payment method.");
    }
}

processPayment(PaymentMethod.PayPal); // "Processing PayPal payment..."
```
‚úÖ **Why use Enums?**  
- Ensures valid payment methods are used.  
- Makes it easy to **add new payment methods** later.  

---

## **7. File Types in a File Upload System**
Enums help manage **file types** in a file upload system.

```typescript
enum FileType {
    PDF = "PDF",
    Image = "IMAGE",
    Video = "VIDEO",
    Audio = "AUDIO"
}

function uploadFile(type: FileType) {
    if (type === FileType.PDF) {
        console.log("Uploading a PDF file...");
    } else if (type === FileType.Image) {
        console.log("Uploading an image...");
    } else {
        console.log("Unsupported file type.");
    }
}

uploadFile(FileType.PDF); // "Uploading a PDF file..."
```
‚úÖ **Why use Enums?**  
- Prevents unsupported file types from being uploaded.  

---

## **8. Theme Selection in a UI Application**
Enums can define **theme options** for an application.

```typescript
enum Theme {
    Light = "LIGHT",
    Dark = "DARK",
    System = "SYSTEM"
}

function setTheme(theme: Theme) {
    console.log(`Applying ${theme} theme...`);
}

setTheme(Theme.Dark); // "Applying DARK theme..."
```
‚úÖ **Why use Enums?**  
- Avoids using plain strings like `"dark"` or `"light"`.  
- Easy to **expand** with more themes in the future.  

---

## **Conclusion**
Enums are highly useful in real-world applications for:
‚úÖ **Role-based access control (User Roles)**  
‚úÖ **API development (HTTP Status Codes)**  
‚úÖ **Order processing (Order Status, Payment Methods)**  
‚úÖ **Logging (Log Levels)**  
‚úÖ **UI settings (Themes, Days of the Week)**  

Would you like an example for a specific use case? üöÄ