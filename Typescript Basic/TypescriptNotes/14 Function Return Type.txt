# **Function Return Type in TypeScript**

## **1. What is a Function Return Type?**
In TypeScript, you can specify the **return type** of a function to define the type of value the function should return. This helps **catch errors early** and ensures the function behaves as expected.

By default, TypeScript **infers** the return type, but it's a best practice to explicitly define it for clarity and maintainability.

---

## **2. Syntax of Function Return Type**
```typescript
function functionName(parameters): ReturnType {
    // function body
    return value; // Must match the ReturnType
}
```

---

## **3. Example: Explicit Return Type**
```typescript
function add(a: number, b: number): number {
    return a + b;
}

console.log(add(5, 3)); // ‚úÖ Output: 8
// console.log(add(5, "3")); // ‚ùå Error: Argument of type 'string' is not assignable to parameter of type 'number'
```
Here:
- `add` function accepts two numbers.
- The return type `number` ensures the function **must return a number**.

---

## **4. Function with `void` Return Type**
The `void` type is used when a function **does not return a value**.

### **Example: Function with `void`**
```typescript
function logMessage(message: string): void {
    console.log("Message:", message);
}

logMessage("Hello, TypeScript!"); // ‚úÖ Output: Message: Hello, TypeScript!
```
Since `logMessage` **only prints to the console** and doesn‚Äôt return anything, its return type is `void`.

---

## **5. Function with `never` Return Type**
The `never` type is used when a function **never returns** (e.g., it throws an error or runs indefinitely).

### **Example: Function with `never`**
```typescript
function throwError(errorMsg: string): never {
    throw new Error(errorMsg);
}

// throwError("Something went wrong!"); // ‚ùå This function will always throw an error and never return.
```
Since `throwError` **never returns a value**, its return type is `never`.

---

## **6. Function with `any` Return Type**
The `any` type disables type checking, making the function return **any type**.

### **Example: Function with `any`**
```typescript
function randomValue(): any {
    return Math.random() > 0.5 ? "Hello" : 42;
}

console.log(randomValue()); // ‚úÖ Output: Could be "Hello" or 42 (TypeScript won‚Äôt check)
```
Using `any` is **not recommended** as it removes type safety.

---

## **7. Function with `unknown` Return Type**
The `unknown` type is safer than `any` and requires explicit type checking before usage.

### **Example: Function with `unknown`**
```typescript
function getUnknownValue(): unknown {
    return "Some data";
}

let value: unknown = getUnknownValue();

// value.toUpperCase(); // ‚ùå Error: Object is of type 'unknown'
if (typeof value === "string") {
    console.log(value.toUpperCase()); // ‚úÖ Allowed after type check
}
```
Using `unknown` **forces type checking** before using the value.

---

## **8. Function with Union Return Type**
A function can return **multiple possible types** using a **union type** (`|`).

### **Example: Union Return Type**
```typescript
function getStatus(code: number): "success" | "error" {
    return code === 200 ? "success" : "error";
}

console.log(getStatus(200)); // ‚úÖ Output: "success"
console.log(getStatus(404)); // ‚úÖ Output: "error"
// console.log(getStatus(500)); // ‚ùå Error: Type '"failure"' is not assignable to '"success" | "error"'
```
Here, `getStatus` ensures it **only returns** `"success"` or `"error"`.

---

## **9. Function with Object Return Type**
A function can return an **object** with predefined properties.

### **Example: Object Return Type**
```typescript
function createUser(name: string, age: number): { name: string; age: number; isActive: boolean } {
    return { name, age, isActive: true };
}

console.log(createUser("Alice", 25)); 
// ‚úÖ Output: { name: "Alice", age: 25, isActive: true }
```
To improve readability, we can use a **Type Alias**.

### **Example: Object Return Type with Type Alias**
```typescript
type User = { name: string; age: number; isActive: boolean };

function createUser(name: string, age: number): User {
    return { name, age, isActive: true };
}
```
This makes the code **cleaner and reusable**.

---

## **10. Function with Array Return Type**
A function can return an **array** of a specific type.

### **Example: Array Return Type**
```typescript
function getNumbers(): number[] {
    return [1, 2, 3, 4, 5];
}

console.log(getNumbers()); // ‚úÖ Output: [1, 2, 3, 4, 5]
```
Here, `getNumbers` **always returns an array of numbers**.

---

## **11. Function with Tuple Return Type**
A function can return a **tuple** (fixed-length array with different types).

### **Example: Tuple Return Type**
```typescript
function getUser(): [number, string] {
    return [1, "Alice"];
}

console.log(getUser()); // ‚úÖ Output: [1, "Alice"]
```
Here, `getUser` **always returns a tuple with a number and a string**.

---

## **12. Function Return Type with Generics**
Using **generics** makes functions more flexible.

### **Example: Generic Function Return Type**
```typescript
function getFirstElement<T>(array: T[]): T {
    return array[0];
}

console.log(getFirstElement([10, 20, 30])); // ‚úÖ Output: 10
console.log(getFirstElement(["Alice", "Bob"])); // ‚úÖ Output: "Alice"
```
Here:
- `T` is a **generic type parameter**.
- The function works for **any array type** (`number[]`, `string[]`, etc.).

---

## **13. Function Return Type Inferred vs Explicit**
TypeScript can **infer** return types, but explicit return types make code **more readable** and **less error-prone**.

### **Example: Inferred Return Type**
```typescript
function sum(a: number, b: number) {
    return a + b; // TypeScript infers the return type as 'number'
}
```

### **Example: Explicit Return Type**
```typescript
function sumExplicit(a: number, b: number): number {
    return a + b; // Explicit return type
}
```
‚úÖ **Use explicit return types in large projects** to improve maintainability.

---

## **14. When to Use Explicit Return Types?**
‚úÖ **Use explicit return types when:**
- Writing **public APIs** or **shared functions**.
- Ensuring functions return **consistent types**.
- **Preventing unintended return type changes**.

‚ùå **Use inferred return types when:**
- The function is **short and simple**.
- The type is **obvious from the context**.

---

## **Conclusion**
- TypeScript allows **explicit function return types** for better **type safety**.
- Use `void` for functions **without return values**.
- Use `never` for functions that **never return** (e.g., throw errors).
- Use **union, object, array, tuple, or generic return types** as needed.
- **Explicit return types help avoid unintended behavior** and improve **code clarity**.

Would you like examples on **asynchronous functions (async/await) with return types**? üöÄ