Angular is a component based javascript framework for building client side applications


1. a component is a piece of user interface
2. every angualr have at least one component
3. angualar application is essential a tree of component
4. combining all thse components together makes an angualar UI

=================================================================

create a component

1 create a typescript class and export it
2. decorator the class with @component decorator
3. declare the class in the main module file
=============================================================
### **What is a Component in Angular?**

A **component** is one of the fundamental building blocks of an Angular application. It is a TypeScript class that defines a piece of the user interface (UI) and is responsible for displaying data and handling user interactions.

---

### **Key Characteristics of a Component**
1. **Encapsulation**:
   - A component encapsulates:
     - **HTML**: Defines the structure or view of the UI.
     - **CSS**: Styles specific to that view.
     - **TypeScript Logic**: Contains the behavior and data processing logic.

2. **Reusability**:
   - Components are reusable pieces of UI that can be easily included in other parts of the application.

3. **Interaction**:
   - Components can interact with each other through inputs, outputs, and services.

---

### **Structure of a Component**
An Angular component typically consists of the following files:

1. **HTML Template (`*.component.html`)**:
   - Defines the structure and layout of the UI.

2. **TypeScript Class (`*.component.ts`)**:
   - Contains the business logic, properties, and methods for the component.

3. **CSS or SCSS File (`*.component.css` or `*.component.scss`)**:
   - Provides styles specific to the component.

4. **Metadata (defined in the `@Component` decorator)**:
   - Provides metadata about the component to Angular, including its template, style, and selector.

---

### **Key Elements of a Component**

1. **@Component Decorator**:
   - Used to define metadata for the component.
   - Example:
     ```typescript
     import { Component } from '@angular/core';

     @Component({
       selector: 'app-example',         // Defines the HTML tag for this component
       templateUrl: './example.component.html', // Links the HTML file
       styleUrls: ['./example.component.css'],  // Links the CSS file
     })
     export class ExampleComponent {
       // Properties and methods for the component
       message: string = 'Hello, Angular!';
       greet() {
         return this.message;
       }
     }
     ```

2. **Selector**:
   - The custom HTML tag used to include the component in a template.
   - Example: `<app-example></app-example>`.

3. **Template**:
   - Contains the HTML code that defines what the component displays.

4. **Styles**:
   - Defines the visual appearance of the component.

5. **Logic (TypeScript Class)**:
   - The class contains:
     - **Properties**: To hold data.
     - **Methods**: To define behavior.

---

### **How Components Work in Angular**

1. **Component Hierarchy**:
   - Components are organized hierarchically, forming a tree structure.
   - The root component (usually `AppComponent`) is the top-level container, and other components are nested inside it.

2. **Binding Data**:
   - **Property Binding**: Pass data from the component to the view.
   - **Event Binding**: Handle user events like clicks.
   - **Two-Way Binding**: Synchronize data between the component and the view using `[(ngModel)]`.

3. **Communication Between Components**:
   - **@Input()**: Pass data from a parent component to a child component.
   - **@Output()**: Emit events from a child component to a parent component.

---

### **Lifecycle of a Component**
Angular components have a well-defined lifecycle, which includes the following hooks:

1. **ngOnInit()**:
   - Called once after the component's data-bound properties are initialized.

2. **ngOnChanges()**:
   - Called whenever input properties change.

3. **ngDoCheck()**:
   - Detect and act upon changes not handled by Angular's default change detection.

4. **ngAfterContentInit()**:
   - Called after content projection into the component has been initialized.

5. **ngAfterContentChecked()**:
   - Called after every check of projected content.

6. **ngAfterViewInit()**:
   - Called after the component's view has been initialized.

7. **ngAfterViewChecked()**:
   - Called after the component's view and its children have been checked.

8. **ngOnDestroy()**:
   - Called just before the component is destroyed. Used for cleanup.

---

### **Advantages of Using Components in Angular**

1. **Modularity**:
   - Promotes the division of an application into smaller, manageable, and reusable parts.

2. **Reusability**:
   - Components can be reused across different parts of the application or even in different projects.

3. **Testability**:
   - Components are easier to test individually.

4. **Encapsulation**:
   - Styles and logic are scoped to the component, preventing interference with other parts of the application.

5. **Improved Collaboration**:
   - Teams can work on different components simultaneously without conflicts.

---

### **Creating a Component in Angular**

1. **Manually**:
   - Create the component files (`.ts`, `.html`, `.css`) and configure the `@Component` decorator.

2. **Using Angular CLI**:
   - The Angular CLI provides an easy way to generate components:
     ```bash
     ng generate component component-name
     ```
   - This automatically creates:
     - `component-name.component.ts`
     - `component-name.component.html`
     - `component-name.component.css`
     - Updates the module file to declare the component.

---

### **Best Practices for Components**

1. **Keep Components Small and Focused**:
   - A component should handle only one piece of functionality.

2. **Use Component Hierarchies**:
   - Organize components into parent-child relationships.

3. **Avoid Logic in Templates**:
   - Keep templates simple and move complex logic to the TypeScript class.

4. **Follow Naming Conventions**:
   - Use consistent naming for files and classes, e.g., `my-feature.component.ts`.

5. **Leverage Inputs and Outputs**:
   - Use `@Input()` and `@Output()` for clean communication between components.

---

### **Conclusion**
Components in Angular are at the core of building user interfaces. They provide a modular and reusable way to design and develop complex applications. By adhering to best practices and leveraging Angular’s tools, components can significantly enhance the maintainability and scalability of your applications.
===============================================
Here’s a list of **Angular component-related interview questions** ranging from beginner to advanced levels to help you prepare:

---

### **Basic Questions**

1. **What is a component in Angular? How is it different from a directive?**
2. **What are the key parts of an Angular component?**
3. **Explain the purpose of the `@Component` decorator.**
4. **How do you create a new component in Angular?**
5. **What is a selector in an Angular component? How is it used?**
6. **How do you include one component inside another in Angular?**
7. **What is the difference between inline and external templates in Angular?**
8. **What are the different ways to bind data in an Angular component?**
9. **What is the purpose of `@Input()` and `@Output()` in Angular components?**
10. **What is property binding, and how is it implemented in a component?**

---

### **Intermediate Questions**

1. **What is the lifecycle of an Angular component? Explain key lifecycle hooks like `ngOnInit` and `ngOnDestroy`.**
2. **How do you pass data from a parent component to a child component?**
3. **How does a child component communicate back to a parent component?**
4. **What is the role of `ViewChild` and `ContentChild` in Angular components?**
5. **How can you use `ng-content` for content projection in a component?**
6. **What is component encapsulation in Angular? How can you configure it?**
7. **Explain how to share data between sibling components.**
8. **What are smart and dumb components in Angular? Why should they be used?**
9. **How do you dynamically create a component in Angular?**
10. **How do you style an Angular component, and what is the role of the `ViewEncapsulation` property?**

---

### **Advanced Questions**

1. **What is Change Detection in Angular, and how does it work in components?**
2. **What are OnPush and Default Change Detection strategies? When should you use them?**
3. **How do you optimize the performance of Angular components?**
4. **What are Angular dynamic components, and how are they implemented?**
5. **Explain the use of `Injector` and `ComponentFactoryResolver` for dynamic component creation.**
6. **What are attribute directives and structural directives? How can they be used with components?**
7. **How does Angular handle component communication in large applications?**
8. **What is the difference between reactive forms and template-driven forms in a component?**
9. **Explain how Angular uses Zones for change detection in components.**
10. **How would you implement a reusable modal component in Angular?**

---

### **Scenario-Based Questions**

1. **You need to create a table component where each row is a child component. How would you approach this?**
2. **How would you handle a situation where a child component needs to call a function from its parent?**
3. **Explain how to use Angular's dependency injection within a component.**
4. **You have a complex form in a component. How would you manage validation and state?**
5. **How would you design a component to handle multiple types of data input dynamically?**

---

### **Practical/Code-Based Questions**

1. **Write a simple Angular component to display a list of items passed as `@Input`.**
2. **Create a component that emits an event when a button is clicked.**
3. **Design a parent component that uses `@ContentChild` to project custom HTML into a child component.**
4. **Write an Angular component with two-way data binding for an input field.**
5. **Implement a reusable pagination component in Angular.**

---

### **Behavioral Questions**
1. **What challenges have you faced when working with Angular components in real-world projects?**
2. **How do you ensure reusability when designing components in Angular?**
3. **Can you describe a time when you had to debug an issue related to component communication?**

---

This list covers theory, practical knowledge, and problem-solving, ensuring you are well-prepared for various aspects of Angular component interviews.

================================================================================================================================================================
If you declare both `templateUrl` and `template` in the `@Component` decorator of an Angular component, **Angular will throw an error during compilation**. This is because the `@Component` decorator does not allow both `templateUrl` and `template` to be used simultaneously.

### **Explanation**
- `templateUrl`: Points to an external HTML file that contains the component's template.
- `template`: Specifies the template directly as an inline string.

You can use **one** of these properties, but not both.

---

### **Why is this an issue?**
Angular needs to know where to get the template for the component. If both `templateUrl` and `template` are specified, it creates ambiguity, as Angular cannot determine which one to use.

---

### **Solution**
Choose **one** of the following:

1. **Using `templateUrl`** (Preferred for larger templates):
   ```typescript
   @Component({
     selector: 'app-header',
     templateUrl: './header.component.html',
     styleUrls: ['./header.component.css']
   })
   export class HeaderComponent {}
   ```

2. **Using `template`** (For small inline templates):
   ```typescript
   @Component({
     selector: 'app-header',
     template: '<h1>ekart</h1>',
     styleUrls: ['./header.component.css']
   })
   export class HeaderComponent {}
   ```

---

### **Best Practices**
- Use `templateUrl` for maintainability and cleaner separation of concerns, especially for complex or larger templates.
- Use `template` for small, simple, or test templates where inline HTML suffices.

Trying to use both properties at once will result in an error like:

```
Error: Component 'HeaderComponent' cannot have both 'template' and 'templateUrl' defined.
```