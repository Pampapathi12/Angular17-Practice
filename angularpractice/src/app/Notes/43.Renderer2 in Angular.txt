manipulate the dom without accessing the directly using render2 class


### **What is Renderer2 in Angular?**

`Renderer2` is a service provided by Angular that is used for manipulating the DOM in a platform-independent and safe way. Instead of directly accessing the DOM using JavaScript (like `document` or `ElementRef.nativeElement`), Angular recommends using `Renderer2` to ensure compatibility with different platforms (e.g., server-side rendering, web workers) and to follow Angular's security practices.

---

### **Why Use Renderer2?**

1. **Platform Independence**: Direct DOM manipulation may not work on platforms like the server (Angular Universal) or web workers. `Renderer2` provides an abstraction over the DOM.
2. **Security**: Direct DOM access may expose applications to security vulnerabilities, such as Cross-Site Scripting (XSS). `Renderer2` ensures safe DOM manipulation.
3. **Change Detection Integration**: Manipulations performed using `Renderer2` are automatically synchronized with Angular's change detection.

---

### **Key Methods of Renderer2**

Here are the most commonly used methods provided by `Renderer2`:

| Method                                      | Description                                                                                  |
|---------------------------------------------|----------------------------------------------------------------------------------------------|
| `createElement(name: string)`               | Creates a new HTML element.                                                                 |
| `createText(value: string)`                 | Creates a text node.                                                                         |
| `appendChild(parent: any, child: any)`      | Appends a child node to a parent node.                                                      |
| `removeChild(parent: any, child: any)`      | Removes a child node from a parent node.                                                    |
| `setAttribute(el: any, name: string, value: string)` | Sets an attribute for the specified element.                                                |
| `removeAttribute(el: any, name: string)`    | Removes an attribute from the specified element.                                            |
| `addClass(el: any, name: string)`           | Adds a CSS class to an element.                                                             |
| `removeClass(el: any, name: string)`        | Removes a CSS class from an element.                                                        |
| `setStyle(el: any, style: string, value: string, flags?: RendererStyleFlags2)` | Sets a style property on an element.                                                        |
| `removeStyle(el: any, style: string, flags?: RendererStyleFlags2)` | Removes a style property from an element.                                                   |
| `listen(target: 'window' | 'document' | 'body' | any, eventName: string, callback: (event: any) => boolean | void)` | Attaches an event listener to an element.                                                   |

---

### **Using Renderer2 in a Component**

To use `Renderer2`, it must be injected into a component or directive via Angular's dependency injection system.

#### Example: Adding and Removing a Class Dynamically
```typescript
import { Component, Renderer2, ElementRef } from '@angular/core';

@Component({
  selector: 'app-example',
  template: `
    <button (click)="addClass()">Add Class</button>
    <button (click)="removeClass()">Remove Class</button>
    <div #boxElement>Box Element</div>
  `,
})
export class ExampleComponent {
  constructor(private renderer: Renderer2, private el: ElementRef) {}

  addClass() {
    const box = this.el.nativeElement.querySelector('div');
    this.renderer.addClass(box, 'highlight');
  }

  removeClass() {
    const box = this.el.nativeElement.querySelector('div');
    this.renderer.removeClass(box, 'highlight');
  }
}
```

Here, `Renderer2` is used to safely add or remove the `highlight` class from a `div` element.

---

### **Advanced Usage**

#### Dynamically Creating Elements
```typescript
import { Component, Renderer2 } from '@angular/core';

@Component({
  selector: 'app-dynamic-element',
  template: '<button (click)="createElement()">Create Element</button>',
})
export class DynamicElementComponent {
  constructor(private renderer: Renderer2) {}

  createElement() {
    const div = this.renderer.createElement('div');
    const text = this.renderer.createText('I am dynamically created!');
    this.renderer.appendChild(div, text);

    // Set styles
    this.renderer.setStyle(div, 'color', 'blue');
    this.renderer.setStyle(div, 'font-weight', 'bold');

    // Append to body
    this.renderer.appendChild(document.body, div);
  }
}
```

---

### **Best Practices**

1. **Avoid Direct DOM Manipulation**: Always prefer `Renderer2` over `document` or `ElementRef.nativeElement` to ensure safety and compatibility.
2. **Use Directives for Reusability**: For DOM-related operations that might be reused, create a directive instead of performing manipulation directly in a component.
3. **Limit DOM Access**: While `Renderer2` is safe, it is best to minimize its usage and let Angular handle DOM updates when possible.

---

### **Limitations of Renderer2**

- **Abstraction Constraints**: Since `Renderer2` is an abstraction, certain advanced or low-level DOM operations might not be supported directly.
- **Performance Overhead**: There may be a slight performance cost compared to direct DOM manipulation, though this is negligible in most cases.

---

### **When Not to Use Renderer2**

- If the operation is purely presentational (like toggling a class based on state), consider using Angular's templating syntax (`[class.someClass]="someCondition"`) instead.
- When binding styles dynamically, prefer Angular's `[style.property]` or `[ngStyle]`.

---

### **Conclusion**

`Renderer2` is a powerful and safe way to interact with the DOM in Angular applications. It ensures that your app remains compatible with different rendering environments and adheres to Angular's security and performance best practices.