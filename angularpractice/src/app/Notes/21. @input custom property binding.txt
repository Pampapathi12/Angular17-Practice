### `@Input`: Custom Property Binding in Angular

In Angular, `@Input` is a decorator provided by the Angular framework that allows you to pass data from a parent component to a child component. It is a key mechanism for implementing custom property binding between components.

Here’s a detailed explanation of how it works:

---

### 1. **What is `@Input`?**
- `@Input` is a decorator used to define a property in a child component as an input property. This means the value for this property can be set by a parent component.
- It facilitates **unidirectional data flow** from the parent to the child.

---

### 2. **How it Works**
When a parent component uses the child component in its template, it can bind to the child’s input property using square brackets (`[]`).

#### Example Syntax:
```html
<app-child [propertyName]="parentValue"></app-child>
```
Here:
- `propertyName` is a property decorated with `@Input` in the child component.
- `parentValue` is the value or variable in the parent component that is passed down.

---

### 3. **Implementation Steps**
#### **Step 1: Create the Child Component**
Define a property in the child component with the `@Input` decorator.

```typescript
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<p>Received Message: {{ message }}</p>`,
})
export class ChildComponent {
  @Input() message!: string; // Input property
}
```

#### **Step 2: Use the Child Component in Parent**
Pass a value from the parent component to the child component.

**Parent Component HTML**:
```html
<app-child [message]="'Hello from Parent'"></app-child>
```

**OR**

**Parent Component TS**:
```typescript
export class ParentComponent {
  parentMessage = "Hello from Parent Component";
}
```

**Parent Component HTML**:
```html
<app-child [message]="parentMessage"></app-child>
```

---

### 4. **Aliasing Input Property**
You can use a different name for the input property when it's used in the parent component by providing an alias.

```typescript
@Input('aliasName') message!: string;
```

**Usage in Parent**:
```html
<app-child [aliasName]="'Hello with Alias'"></app-child>
```

---

### 5. **Default Values for Input Properties**
If no value is provided from the parent, the input property can have a default value.

```typescript
@Input() message: string = "Default Message";
```

---

### 6. **Input Binding with Objects**
You can also pass complex objects, not just primitive values.

**Parent Component TS**:
```typescript
export class ParentComponent {
  user = { name: 'John', age: 25 };
}
```

**Child Component TS**:
```typescript
@Input() user!: { name: string; age: number };
```

**Parent Component HTML**:
```html
<app-child [user]="user"></app-child>
```

---

### 7. **Using Lifecycle Hooks with `@Input`**
The `@Input` properties are set after the component's constructor runs but before the `ngOnInit` lifecycle hook. You can also use `ngOnChanges` to detect changes in the input properties.

#### Example:
```typescript
import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<p>User Name: {{ userName }}</p>`,
})
export class ChildComponent implements OnChanges {
  @Input() userName!: string;

  ngOnChanges(changes: SimpleChanges) {
    console.log('Changes detected:', changes);
  }
}
```

---

### 8. **Error Handling**
- **Undefined Inputs**: If the parent component doesn't pass a value for an input property, it may result in `undefined` unless a default value is provided.
- **Type Safety**: Using TypeScript helps ensure the input data types are as expected.

---

### 9. **Custom Property Binding Summary**
- **Customizable Communication**: `@Input` allows reusable components by enabling dynamic data passing.
- **Encapsulation**: Maintains encapsulation by controlling how the child component receives data.
- **Lifecycle Management**: Works seamlessly with Angular lifecycle hooks like `ngOnChanges` to handle dynamic updates.

---

### 10. **Advanced Use Cases**
#### **Two-Way Binding with `@Input` and `@Output`**
Although `@Input` only allows one-way data binding (parent to child), you can combine it with `@Output` to achieve two-way binding.

Example:
```typescript
@Input() value!: string;
@Output() valueChange = new EventEmitter<string>();

updateValue(newValue: string) {
  this.value = newValue;
  this.valueChange.emit(this.value);
}
```

**Parent Usage**:
```html
<app-child [(value)]="parentValue"></app-child>
```

---

### 11. **Key Points to Remember**
- `@Input` enables **unidirectional data flow** from parent to child.
- Always use TypeScript types for strong typing.
- It supports both primitive and complex data types.
- It integrates seamlessly with Angular’s lifecycle hooks for change detection.

By mastering `@Input`, you can create robust and reusable Angular components that effectively communicate with each other.
============================================


component have parent and child relationship

product-list (Parent Component)  ->  Custom Property binding & @input() decorator -> product(child component)


step1 : in the child component
reciee the current roduct objects from the ParentComponent(specific product details only)

@Input()

product = undefined;
===============
 <app-product *ngFor="let prod of products" [product]="prod"></app-product>
    <!-- passing the parent compoennt data into child compoenent  -->
    <!-- this custom property binding here [product] from the child component -->
    <!-- pass the parent compoennet to child component -->


    ======================
    In Angular, there are several ways to pass data from a parent component to a child component. Here are the most common methods:

---

### 1. **Using Input Property Binding**  
The `@Input` decorator is the most common way to pass data from a parent to a child component.

**Parent Component Template:**
```html
<app-child [data]="parentData"></app-child>
```

**Child Component:**
```typescript
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<p>{{ data }}</p>`,
})
export class ChildComponent {
  @Input() data: string;
}
```

---

### 2. **Passing Data with a Service**  
If the data needs to be shared across multiple components or kept consistent, you can use a shared service.

**Service:**
```typescript
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class DataService {
  public data = 'Shared Data';
}
```

**Parent Component:**
```typescript
import { Component } from '@angular/core';
import { DataService } from './data.service';

@Component({
  selector: 'app-parent',
  template: `<app-child></app-child>`,
})
export class ParentComponent {
  constructor(public dataService: DataService) {}
}
```

**Child Component:**
```typescript
import { Component } from '@angular/core';
import { DataService } from './data.service';

@Component({
  selector: 'app-child',
  template: `<p>{{ dataService.data }}</p>`,
})
export class ChildComponent {
  constructor(public dataService: DataService) {}
}
```

---

### 3. **Using a Template Reference Variable**  
You can pass a parent component reference directly to the child using a template reference variable.

**Parent Component Template:**
```html
<app-child [parent]="this"></app-child>
```

**Child Component:**
```typescript
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<p>{{ parent.someProperty }}</p>`,
})
export class ChildComponent {
  @Input() parent: any;
}
```

---

### 4. **Using a Setter with `@Input`**  
You can use a setter to execute logic whenever the data changes.

**Child Component:**
```typescript
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<p>{{ transformedData }}</p>`,
})
export class ChildComponent {
  private _data: string;
  transformedData: string;

  @Input()
  set data(value: string) {
    this._data = value;
    this.transformedData = value.toUpperCase();
  }

  get data(): string {
    return this._data;
  }
}
```

**Parent Component Template:**
```html
<app-child [data]="parentData"></app-child>
```

---

### 5. **Using Angular Content Projection (`ng-content`)**  
You can pass content using `<ng-content>`.

**Parent Component Template:**
```html
<app-child>
  <p>This is passed content!</p>
</app-child>
```

**Child Component Template:**
```html
<div>
  <ng-content></ng-content>
</div>
```

---

### 6. **Using Component Lifecycle Hooks**  
If the child needs to access data after initialization, you can use lifecycle hooks such as `ngOnChanges`.

**Child Component:**
```typescript
import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<p>{{ data }}</p>`,
})
export class ChildComponent implements OnChanges {
  @Input() data: string;

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['data']) {
      console.log('Data changed:', changes['data'].currentValue);
    }
  }
}
```

---

### 7. **Using Angular ViewChild/ViewChildren**  
If the child component exposes properties or methods, the parent can access them using `@ViewChild` or `@ViewChildren`.

**Parent Component:**
```typescript
import { Component, ViewChild } from '@angular/core';
import { ChildComponent } from './child.component';

@Component({
  selector: 'app-parent',
  template: `<app-child></app-child>
             <button (click)="updateChild()">Update Child</button>`,
})
export class ParentComponent {
  @ViewChild(ChildComponent) child: ChildComponent;

  updateChild() {
    this.child.childMethod();
  }
}
```

**Child Component:**
```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<p>Child Component</p>`,
})
export class ChildComponent {
  childMethod() {
    console.log('Method in Child Component called!');
  }
}
```

---

Each approach has its use case depending on the relationship between the parent and child components and the complexity of the application.