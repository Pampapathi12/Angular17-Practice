Boostraping is the process of initilizing or loading the angular application
-> angular project -> index.html -> <app-root></app-root> -> tag
how does angualr knows 
-> Ng serve :- compile the application and create the bundle file and inject into the index.html file
-> ng build :- building the angular application
   .index.html script files are injected in the index.html
   webpack 
   polyfills -> support the old browser version
   main -> compile the typescript code into the javascript file


   runtime.js
   polyfills.js
   style.js
   vendor.js
   main.js
   ==================================================================================
   These JavaScript files (`runtime.js`, `polyfills.js`, `styles.js`, `vendor.js`, and `main.js`) are part of an Angular application when it is built and deployed. Here's an explanation of each file, its purpose, when it is used, and an example of what it contains:

---

### **1. `runtime.js`**
- **Purpose**: 
  - Manages the loading and execution of the application by handling Webpack's module system.
  - Ensures lazy-loaded modules and chunks are loaded dynamically at runtime.
- **When Used**: During application startup and module loading.
- **Example**:
  - Contains Webpack-specific code for bootstrapping and module resolution.
  ```javascript
  (function(modules) {
    // Webpack runtime logic to load modules
  })([/* module definitions */]);
  ```
- **Scenario**: When you navigate between routes, `runtime.js` ensures the required modules are loaded dynamically.

---

### **2. `polyfills.js`**
- **Purpose**: 
  - Includes polyfills required to provide support for older browsers that do not natively support modern JavaScript and Angular features (like ES6, Promises, and Fetch API).
- **When Used**: At the beginning of the application to ensure compatibility with all targeted browsers.
- **Example**:
  - Adds missing browser features.
  ```javascript
  // Example: Polyfill for Promise
  if (!window.Promise) {
    window.Promise = /* implementation */;
  }
  ```
- **Scenario**: Ensures features like `Array.prototype.includes` or `Promise` work in older browsers like Internet Explorer.

---

### **3. `styles.js`**
- **Purpose**: 
  - Contains the global CSS and stylesheets defined in the Angular project (`src/styles.css` or `.scss`) and imported styles from the `angular.json` configuration.
- **When Used**: Loaded into the browser at the initial rendering to apply global styles to the app.
- **Example**:
  ```css
  body {
    font-family: Arial, sans-serif;
  }
  .button {
    background-color: #007bff;
  }
  ```
- **Scenario**: When a user visits your app, `styles.js` ensures global and third-party library styles are applied.

---

### **4. `vendor.js`**
- **Purpose**: 
  - Contains third-party libraries and dependencies used by the Angular application, such as `RxJS`, `Angular core modules`, or utility libraries like `lodash`.
- **When Used**: At the initial load and whenever external libraries are required.
- **Example**:
  ```javascript
  import { Observable } from 'rxjs';

  Observable.of(1, 2, 3).subscribe(console.log);
  ```
- **Scenario**: Handles third-party dependencies like RxJS or Angular core modules, ensuring shared libraries are loaded once.

---

### **5. `main.js`**
- **Purpose**: 
  - Contains the compiled application code written by the developer.
  - Serves as the entry point for bootstrapping the Angular app.
- **When Used**: At application startup, when `platformBrowserDynamic` bootstraps the `AppModule`.
- **Example**:
  ```javascript
  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
  import { AppModule } from './app/app.module';

  platformBrowserDynamic().bootstrapModule(AppModule)
    .catch(err => console.error(err));
  ```
- **Scenario**: Includes your app's business logic, components, and services.

---

### **Lifecycle Flow**:
1. **Browser loads the app**:
   - `runtime.js` starts the app's Webpack runtime.
   - `polyfills.js` ensures the browser supports the required features.
2. **Global styles applied**:
   - `styles.js` ensures all global styles are loaded.
3. **Third-party dependencies loaded**:
   - `vendor.js` makes third-party libraries available.
4. **App bootstrapped**:
   - `main.js` initializes and renders the Angular application.

---

### **Key Notes**:
- These files are generated during the **build process** (`ng build`).
- The contents are minified and optimized in **production mode** to reduce size and improve performance. For instance, `runtime.js` in production handles code splitting and chunk loading.

Angular project -> Index.html -> angular.json -> main.ts -> AppModule -> app.component.ts -> view template
======================================
typescript is a superset of javascript
typescript is strongly typed , but javascript is dynamically typed

The distinction between **strongly typed** (TypeScript) and **dynamically typed** (JavaScript) languages can be demonstrated with examples:

---

### **JavaScript (Dynamically Typed)**
In JavaScript, variables are not bound to a specific type. You can reassign values of different types to the same variable:

```javascript
// JavaScript example
let value = 42; // Initially a number
console.log(typeof value); // "number"

value = "Hello"; // Now a string
console.log(typeof value); // "string"

value = true; // Now a boolean
console.log(typeof value); // "boolean"
```

- **Behavior**: 
  - JavaScript doesn't enforce type consistency, which makes it dynamically typed.
  - The type of a variable is determined at runtime based on its value.

---

### **TypeScript (Strongly Typed)**
In TypeScript, you explicitly define the type of variables, and the type cannot change. If you attempt to assign a value of a different type, the compiler throws an error.

```typescript
// TypeScript example
let value: number = 42; // Explicitly a number
console.log(typeof value); // "number"

// Reassigning a value of a different type causes an error
// value = "Hello"; // Error: Type 'string' is not assignable to type 'number'

// Correct assignment
value = 100; // Works because it's a number
```

- **Behavior**: 
  - TypeScript enforces type checking at compile time.
  - Once a type is assigned, you cannot change it unless you explicitly use `any` or `unknown`.

---

### **Advantages of Strong Typing in TypeScript**
1. **Error Detection at Compile Time**:
   - Many type-related bugs are caught before runtime.
   ```typescript
   let count: number = "five"; // Compile-time error
   ```

2. **Better Tooling and Autocomplete**:
   - TypeScript provides better IntelliSense and code completion due to explicit type declarations.

3. **Improved Maintainability**:
   - Enforcing types makes code easier to understand and maintain, especially in large projects.

---

### Comparison Table:

| Feature                  | **JavaScript**                 | **TypeScript**                |
|--------------------------|---------------------------------|--------------------------------|
| **Typing**               | Dynamic                        | Static (strongly typed)       |
| **Error Detection**      | At runtime                     | At compile time               |
| **Variable Type Flexibility** | Can change at runtime         | Fixed, based on declaration   |
| **Tooling Support**      | Limited                        | Extensive                     |
| **Learning Curve**       | Easier for beginners           | Requires understanding of types |

---

In summary:
- **JavaScript** is flexible but prone to runtime errors due to its dynamic typing.
- **TypeScript** provides stricter type checking, reducing errors and making large-scale development more robust.
========================================================================


JavaScript

let name = ' John';
name = "smith"
let age = 28;
let isMarried = false;

let name: string = 'John'
let age: number = 28;
let isMarried: boolean = false