two components are not related and sibling compoent , how to pass the data between,

/Continer
  /product-list
  /Search
  ==================
  search compoent

  [1]. in the child compoennt need to create the event emitter and use @Output
        and onSearchTextChange in the search html
  [2]. in the child compoennt rise the event emitter and when search 
  =========================
  container compoennt
  [3]. create property searchText and SetsearchText() 
  [4]. in the container html file where the app-search selector rise event emitter bind and with searchText()
       <app-search (onSearchTextChanges)="SetsearchText($event)"></app-search>

  ===================================
  product-list compoennt
  [5]. @input for recieve the data from the container compoennt and create the searchText
  [6]. bind the data in the html file in the product-list component


  here product-list and search ar not parent and child compoennt but are siblings under the container
 1. combination of property binding and event binding
 =====================

 Based on your screenshot, the approach using **property binding** and **event binding** to communicate between sibling components (`product-list` and `search`) with a **parent container** is already explained. Here's the example using this exact methodology:

---

### Example with Your Structure

1. **Shared Data Flow**:
   - **`search`** emits an event (e.g., search query).
   - **`container`** (parent) listens to the emitted event and updates its state.
   - **`container`** passes the updated state to **`product-list`** via property binding.

---

### Implementation in Detail

#### 1. Parent Component (`container`)

##### HTML (`container.component.html`)
```html
<app-search (searchEvent)="onSearch($event)"></app-search>
<app-product-list [searchQuery]="searchQuery"></app-product-list>
```

##### TypeScript (`container.component.ts`)
```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-container',
  templateUrl: './container.component.html',
})
export class ContainerComponent {
  searchQuery: string = '';

  // Handle search emitted by the Search component
  onSearch(query: string) {
    this.searchQuery = query; // Update query and pass to Product List
  }
}
```

---

#### 2. Search Component (`search`)

##### HTML (`search.component.html`)
```html
<div>
  <input [(ngModel)]="query" placeholder="Search products..." />
  <button (click)="emitSearch()">Search</button>
</div>
```

##### TypeScript (`search.component.ts`)
```typescript
import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
})
export class SearchComponent {
  @Output() searchEvent = new EventEmitter<string>();
  query: string = '';

  emitSearch() {
    this.searchEvent.emit(this.query); // Emit search query
  }
}
```

---

#### 3. Product List Component (`product-list`)

##### HTML (`product-list.component.html`)
```html
<div>
  <h3>Products</h3>
  <ul>
    <li *ngFor="let product of filteredProducts">{{ product }}</li>
  </ul>
</div>
```

##### TypeScript (`product-list.component.ts`)
```typescript
import { Component, Input, OnChanges } from '@angular/core';

@Component({
  selector: 'app-product-list',
  templateUrl: './product-list.component.html',
})
export class ProductListComponent implements OnChanges {
  @Input() searchQuery: string = '';
  products = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry'];
  filteredProducts = this.products;

  ngOnChanges() {
    // Filter products based on the search query
    if (this.searchQuery) {
      this.filteredProducts = this.products.filter((product) =>
        product.toLowerCase().includes(this.searchQuery.toLowerCase())
      );
    } else {
      this.filteredProducts = this.products; // Reset if query is empty
    }
  }
}
```

---

### How It Works

1. **Emit Data from `search`**:
   - `search.component` emits the search query using `@Output()` and `EventEmitter`.

2. **Capture in `container`**:
   - `container.component` listens to the emitted `searchEvent` and updates the `searchQuery`.

3. **Pass to `product-list`**:
   - `container.component` passes the `searchQuery` to `product-list` using `@Input()` property binding.

4. **React in `product-list`**:
   - `product-list.component` uses `ngOnChanges` to filter the product list based on the query.

---

This approach directly matches the diagram from the screenshot and ensures sibling components communicate efficiently via the parent container.
=================================================================



In Angular, when two sibling components need to share data but do not have a direct parent-child relationship, you can use a shared service to facilitate communication between them. Here's how you can achieve it:

### 1. Create a Shared Service
The service will act as a mediator between the sibling components.

```typescript
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class SharedService {
  private dataSubject = new BehaviorSubject<any>(null);
  data$ = this.dataSubject.asObservable();

  setData(data: any) {
    this.dataSubject.next(data);
  }
}
```

- The `BehaviorSubject` is used because it retains the latest value and allows subscribers to receive the current value.

---

### 2. Inject the Service in Both Sibling Components
You need to use the shared service in both components.

#### Sibling Component 1 (Sender)
```typescript
import { Component } from '@angular/core';
import { SharedService } from '../shared.service';

@Component({
  selector: 'app-sibling1',
  template: `
    <button (click)="sendData()">Send Data</button>
  `,
})
export class Sibling1Component {
  constructor(private sharedService: SharedService) {}

  sendData() {
    const data = { message: 'Hello from Sibling 1' };
    this.sharedService.setData(data);
  }
}
```

#### Sibling Component 2 (Receiver)
```typescript
import { Component, OnInit } from '@angular/core';
import { SharedService } from '../shared.service';

@Component({
  selector: 'app-sibling2',
  template: `
    <div>Received Data: {{ receivedData | json }}</div>
  `,
})
export class Sibling2Component implements OnInit {
  receivedData: any;

  constructor(private sharedService: SharedService) {}

  ngOnInit() {
    this.sharedService.data$.subscribe((data) => {
      this.receivedData = data;
    });
  }
}
```

---

### 3. Use Both Components in a Common Parent
Add both components to a parent component's template.

```html
<app-sibling1></app-sibling1>
<app-sibling2></app-sibling2>
```

---

### Explanation
1. **SharedService**:
   - Maintains a `BehaviorSubject` to store and broadcast the shared data.
   - Exposes an observable `data$` for components to subscribe to.

2. **Sibling1Component**:
   - Sends data to the service using the `setData` method.

3. **Sibling2Component**:
   - Subscribes to the observable `data$` to receive updates whenever data changes.

This approach ensures that the two sibling components can communicate efficiently without being directly coupled, adhering to Angular's reactive programming principles.

========================
Yes, there are other ways to pass data between unrelated sibling components in Angular. Here are additional approaches:

---

### 1. **Using a Parent Component as a Mediator**
If the siblings share a common parent, the parent component can act as a bridge for data exchange.

#### Steps:
1. Define properties or methods in the parent component to hold and manage the shared data.
2. Pass data to and from siblings using `@Input()` and `@Output()` bindings.

#### Example:

##### Parent Component Template
```html
<app-sibling1 (dataEvent)="receiveData($event)"></app-sibling1>
<app-sibling2 [sharedData]="data"></app-sibling2>
```

##### Parent Component Logic
```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-parent',
  templateUrl: './parent.component.html',
})
export class ParentComponent {
  data: any;

  receiveData(data: any) {
    this.data = data;
  }
}
```

##### Sibling1Component (Sender)
```typescript
import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-sibling1',
  template: `<button (click)="sendData()">Send Data</button>`,
})
export class Sibling1Component {
  @Output() dataEvent = new EventEmitter<any>();

  sendData() {
    this.dataEvent.emit({ message: 'Hello from Sibling 1' });
  }
}
```

##### Sibling2Component (Receiver)
```typescript
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-sibling2',
  template: `<div>Received Data: {{ sharedData | json }}</div>`,
})
export class Sibling2Component {
  @Input() sharedData: any;
}
```

---

### 2. **Using Angular EventEmitter with a Singleton Event Bus**
You can create a singleton event bus using Angular's `EventEmitter` to facilitate communication.

#### Steps:
1. Create an event bus service.
2. Use `EventEmitter` to broadcast and listen for events.

#### Event Bus Service
```typescript
import { Injectable, EventEmitter } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class EventBusService {
  dataEvent = new EventEmitter<any>();

  emitData(data: any) {
    this.dataEvent.emit(data);
  }
}
```

#### Sibling1Component (Sender)
```typescript
import { Component } from '@angular/core';
import { EventBusService } from '../event-bus.service';

@Component({
  selector: 'app-sibling1',
  template: `<button (click)="sendData()">Send Data</button>`,
})
export class Sibling1Component {
  constructor(private eventBusService: EventBusService) {}

  sendData() {
    this.eventBusService.emitData({ message: 'Hello from Sibling 1' });
  }
}
```

#### Sibling2Component (Receiver)
```typescript
import { Component, OnInit } from '@angular/core';
import { EventBusService } from '../event-bus.service';

@Component({
  selector: 'app-sibling2',
  template: `<div>Received Data: {{ receivedData | json }}</div>`,
})
export class Sibling2Component implements OnInit {
  receivedData: any;

  constructor(private eventBusService: EventBusService) {}

  ngOnInit() {
    this.eventBusService.dataEvent.subscribe((data) => {
      this.receivedData = data;
    });
  }
}
```

---

### 3. **Using Angular Router State**
If the data is related to routing (e.g., navigation between pages), you can use `Router` with `NavigationExtras`.

#### Example:

##### Sending Data
```typescript
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-sibling1',
  template: `<button (click)="sendData()">Navigate with Data</button>`,
})
export class Sibling1Component {
  constructor(private router: Router) {}

  sendData() {
    this.router.navigate(['/sibling2'], {
      state: { data: { message: 'Hello from Sibling 1' } },
    });
  }
}
```

##### Receiving Data
```typescript
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-sibling2',
  template: `<div>Received Data: {{ receivedData | json }}</div>`,
})
export class Sibling2Component {
  receivedData: any;

  constructor(private router: Router) {
    this.receivedData = this.router.getCurrentNavigation()?.extras.state?.['data'];
  }
}
```

---

### 4. **Using Local Storage/Session Storage**
For persistent data sharing, you can store data in `localStorage` or `sessionStorage` and retrieve it in sibling components.

#### Sibling1Component (Sender)
```typescript
localStorage.setItem('sharedData', JSON.stringify({ message: 'Hello from Sibling 1' }));
```

#### Sibling2Component (Receiver)
```typescript
const data = JSON.parse(localStorage.getItem('sharedData') || '{}');
```

---

### Choose the Best Approach
- **Shared Service**: Best for reactive and ongoing communication.
- **Parent Component as Mediator**: Best for local state management when siblings have a common parent.
- **Event Bus**: Best for loose coupling and event-driven communication.
- **Router State**: Best when data needs to be passed during navigation.
- **Storage**: Best for persistent or cross-tab data sharing.
==============================================================
